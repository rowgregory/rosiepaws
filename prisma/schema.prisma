// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StripeSubscription {
  id              String    @id @default(uuid())
  userId          String    @unique
  customerId      String // from Stripe when creating the customer
  paymentMethodId String // Stripe PaymentMethod ID (reusable)
  subscriptionId  String? // optional: track active subscription
  status          String    @default("inactive")
  plan            String    @default("free")
  trialEndsAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model User {
  id                 String  @id @default(cuid())
  firstName          String  @db.VarChar(255)
  lastName           String  @db.VarChar(255)
  password           String  @db.VarChar(255)
  email              String  @unique @db.VarChar(255)
  isAdmin            Boolean @default(false)
  isClient           Boolean @default(false)
  isSuperUser        Boolean @default(false)
  role               String  @db.VarChar(255)
  securityQuestion   String  @db.VarChar(255)
  securityAnswerHash String  @db.VarChar(255)

  stripeCustomerId   String?             @unique @db.VarChar(255)
  stripeSubscription StripeSubscription?
  pets               Pet[]
  blogs              Blog[]
  journals           Journal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PetType {
  DOG
  CAT
}

model Pet {
  id      String  @id @default(cuid())
  name    String
  type    PetType
  breed   String?
  age     Int?
  gender  String?
  weight  Float?
  owner   User    @relation(fields: [ownerId], references: [id])
  ownerId String
  notes   String?

  appointments      Appointment[]
  medications       Medication[]
  feedings          Feeding[]
  seizureActivities SeizureActivity[]
  walks             Walk[]
  waterIntakes      WaterIntake[]
  bloodSugars       BloodSugar[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id       String   @id @default(cuid())
  date     DateTime
  reason   String
  location String?
  notes    String?

  pet   Pet    @relation(fields: [petId], references: [id])
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BloodSugar {
  id    String  @id @default(uuid())
  value Int // 0â€“500 range expected
  notes String?
  pet   Pet     @relation(fields: [petId], references: [id])
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feeding {
  id       String   @id @default(uuid())
  timeFed  DateTime
  foodType String
  notes    String?
  pet      Pet      @relation(fields: [petId], references: [id])
  petId    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medication {
  id        String   @id @default(uuid())
  name      String
  dosage    String
  timeGiven DateTime
  notes     String?

  pet   Pet    @relation(fields: [petId], references: [id])
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeizureActivity {
  id         String   @id @default(cuid())
  occurredAt DateTime
  duration   Int? // Duration in seconds (optional)
  notes      String? // Optional observations or details

  pet   Pet    @relation(fields: [petId], references: [id])
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Walk {
  id         String   @id @default(uuid())
  duration   Int // in minutes
  timeWalked DateTime
  notes      String?
  pet        Pet      @relation(fields: [petId], references: [id])
  petId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model WaterIntake {
  id        String   @id @default(uuid())
  amount    Float // in mL or ounces
  timeGiven DateTime
  notes     String?
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id       String @id @default(uuid())
  title    String
  content  String
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Journal {
  id      String @id @default(uuid())
  title   String
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Newsletter {
  id                       String  @id @default(cuid())
  firstName                String  @db.VarChar(255)
  lastName                 String  @db.VarChar(255)
  email                    String  @unique @db.VarChar(255)
  agreedToPrivacyStatement Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        String   @id @default(cuid())
  level     String // e.g., 'info', 'error', 'debug'
  message   String
  metadata  Json? // Optional, store additional context
  createdAt DateTime @default(now())
}
