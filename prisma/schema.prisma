// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @default(cuid())
  firstName          String   @db.VarChar(255)
  lastName           String   @db.VarChar(255)
  password           String   @db.VarChar(255)
  email              String   @unique @db.VarChar(255)
  isAdmin            Boolean  @default(false)
  isClient           Boolean  @default(false)
  isSuperUser        Boolean  @default(false)
  role               String   @db.VarChar(255)
  securityQuestion   String   @db.VarChar(255)
  securityAnswerHash String   @db.VarChar(255)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  stripeCustomerId   String?             @unique @db.VarChar(255) // Make this optional if you want to add it later
  stripeSubscription StripeSubscription?
}

model StripeSubscription {
  id              String    @id @default(uuid())
  userId          String    @unique
  customerId      String // from Stripe when creating the customer
  paymentMethodId String // Stripe PaymentMethod ID (reusable)
  subscriptionId  String? // optional: track active subscription
  status          String    @default("inactive")
  plan            String    @default("free")
  trialEndsAt     DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Log {
  id        String   @id @default(cuid())
  level     String // e.g., 'info', 'error', 'debug'
  message   String
  metadata  Json? // Optional, store additional context
  createdAt DateTime @default(now())
}

model Newsletter {
  id                       String   @id @default(cuid())
  firstName                String   @db.VarChar(255)
  lastName                 String   @db.VarChar(255)
  email                    String   @unique @db.VarChar(255)
  agreedToPrivacyStatement Boolean  @default(false)
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt
}

model Address {
  id            String  @id @default(cuid())
  addressLine1  String? @db.VarChar(255)
  addressLine2  String? @db.VarChar(255)
  city          String? @db.VarChar(255)
  state         String? @db.VarChar(255)
  zipPostalCode String? @db.VarChar(255)
}

model Blog {
  id        String   @id @default(uuid())
  title     String
  content   String
  author    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medication {
  id        String   @id @default(uuid())
  name      String
  dosage    String
  timeGiven DateTime
  petId     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Journal {
  id        String   @id @default(uuid())
  userId    String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feeding {
  id        String   @id @default(uuid())
  petId     String
  timeFed   DateTime
  foodType  String
  notes     String?
  userId    String
  createdAt DateTime @default(now())
}

model Walk {
  id         String   @id @default(uuid())
  petId      String
  duration   Int // in minutes
  timeWalked DateTime
  notes      String?
  userId     String
  createdAt  DateTime @default(now())
}

model WaterIntake {
  id        String   @id @default(uuid())
  petId     String
  amount    Float // in mL or ounces
  timeGiven DateTime
  userId    String
  createdAt DateTime @default(now())
}

model Ebook {
  id        String   @id @default(uuid())
  title     String
  url       String
  metadata  String?
  createdAt DateTime @default(now())
}
