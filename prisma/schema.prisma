// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model StripeSubscription {
  id                String    @id @default(uuid())
  userId            String    @unique
  customerId        String // from Stripe when creating the customer
  paymentMethodId   String // Stripe PaymentMethod ID (reusable)
  subscriptionId    String? // optional: track active subscription
  status            String    @default("inactive")
  plan              String    @default("free")
  planPrice         Int       @default(0)
  trialEndsAt       DateTime?
  cancelAtPeriodEnd Boolean
  canceledAt        DateTime?
  currentPeriodEnd  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model User {
  id                 String  @id @default(cuid())
  firstName          String  @db.VarChar(255)
  lastName           String  @db.VarChar(255)
  password           String  @db.VarChar(255)
  email              String  @unique @db.VarChar(255)
  isSuperUser        Boolean @default(false)
  isAdmin            Boolean @default(false)
  isGuardian         Boolean @default(false)
  isBasicUser        Boolean @default(false)
  isPremiumUser      Boolean @default(false)
  role               String  @db.VarChar(255)
  securityQuestion   String  @db.VarChar(255)
  securityAnswerHash String  @db.VarChar(255)

  stripeCustomerId   String?             @unique @db.VarChar(255)
  stripeSubscription StripeSubscription?
  pets               Pet[]
  blogs              Blog[]
  journals           Journal[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PetType {
  DOG
  CAT
}

model Pet {
  id      String  @id @default(cuid())
  name    String
  type    PetType
  breed   String
  age     String
  gender  String
  weight  String
  owner   User    @relation(fields: [ownerId], references: [id])
  ownerId String
  notes   String?

  painScores   PainScore[]
  appointments Appointment[]
  medications  Medication[]
  feedings     Feeding[]
  seizures     Seizure[]
  waters       Water[]
  bloodSugars  BloodSugar[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PainScore {
  id           String  @id @default(cuid())
  score        Int
  timeRecorded String  @default("")
  notes        String?
  pet          Pet     @relation(fields: [petId], references: [id])
  petId        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id       String   @id @default(cuid())
  date     DateTime
  reason   String
  location String?
  notes    String?

  pet   Pet    @relation(fields: [petId], references: [id])
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BloodSugar {
  id        String   @id @default(uuid())
  value     String
  notes     String?
  timeTaken DateTime
  pet       Pet      @relation(fields: [petId], references: [id])
  petId     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feeding {
  id         String   @id @default(uuid())
  timeFed    DateTime
  foodType   String
  foodAmount String
  moodRating Int      @default(0)
  notes      String?
  pet        Pet      @relation(fields: [petId], references: [id])
  petId      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medication {
  id                 String    @id @default(uuid())
  drugName           String
  dosage             String
  dosageUnit         String
  frequency          String
  customFrequency    String?
  startDate          DateTime
  endDate            DateTime?
  reminderEnabled    Boolean   @default(false)
  reminderTimes      String[] // Changed from Json to String[]
  lastReminderDate   String?
  sentRemindersToday String[]
  instructions       String?
  prescribedBy       String?
  timezoneOffset     Int       @default(-5)

  pet   Pet    @relation(fields: [petId], references: [id])
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seizure {
  id            String   @id @default(cuid())
  timeTaken     DateTime
  duration      Int // Duration in seconds (optional)
  notes         String? // Optional observations or details
  videoUrl      String?
  videoFilename String?
  pet           Pet      @relation(fields: [petId], references: [id])
  petId         String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Water {
  id             String  @id @default(uuid())
  intakeType     String
  milliliters    String
  relativeIntake String
  timeRecorded   String
  moodRating     String
  notes          String?
  pet            Pet     @relation(fields: [petId], references: [id])
  petId          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id       String @id @default(uuid())
  title    String
  content  String
  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Journal {
  id      String @id @default(uuid())
  title   String
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Newsletter {
  id                       String  @id @default(cuid())
  firstName                String  @db.VarChar(255)
  lastName                 String  @db.VarChar(255)
  email                    String  @unique @db.VarChar(255)
  agreedToPrivacyStatement Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        String   @id @default(cuid())
  level     String // e.g., 'info', 'error', 'debug'
  message   String
  metadata  Json? // Optional, store additional context
  createdAt DateTime @default(now())
}
