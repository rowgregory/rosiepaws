// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TokenTransactionType {
  SIGNUP_BONUS // Initial 150 tokens on signup
  PURCHASE // Tokens bought
  USAGE // Tokens consumed for features
  REFUND // Tokens refunded
  BONUS // Promotional tokens
  ADMIN_ADJUSTMENT // Manual adjustments
  PET_CREATION
  PET_UPDATE
  PET_DELETE
  WALK_CREATION
  WALK_UPDATE
  WALK_DELETE
  VITAL_SIGNS_CREATION
  VITAL_SIGNS_UPDATE
  VITAL_SIGNS_DELETE
  PAIN_SCORE_CREATION
  PAIN_SCORE_UPDATE
  PAIN_SCORE_DELETE
  FEEDING_CREATION
  FEEDING_UPDATE
  FEEDING_DELETE
  APPOINTMENT_CREATION
  APPOINTMENT_UPDATE
  APPOINTMENT_DELETE
  WATER_CREATION
  WATER_UPDATE
  WATER_DELETE
  MEDICATION_CREATION
  MEDICATION_UPDATE
  MEDICATION_DELETE
  BLOOD_SUGAR_CREATION
  BLOOD_SUGAR_UPDATE
  BLOOD_SUGAR_DELETE
  SEIZURE_TRACKING_CREATION
  SEIZURE_TRACKING_UPDATE
  SEIZURE_TRACKING_DELETE
  MOVEMENT_CREATION
  MOVEMENT_UPDATE
  MOVEMENT_DELETE
}

enum PetType {
  DOG
  CAT
}

enum MediaType {
  POSTER
  EBOOK
  DOCUMENT
  VIDEO
  IMAGE
}

enum MediaColor {
  BLUE
  PURPLE
  GREEN
  ORANGE
  RED
  INDIGO
  PINK
  YELLOW
  GRAY
}

enum AppointmentType {
  CHECKUP
  VACCINATION
  GROOMING
  DENTAL
  SURGERY
  EMERGENCY
  CONSULTATION
}

enum AppointmentStatus {
  SCHEDULED
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  RESCHEDULED
}

enum MovementType {
  WALK
  RUN
  SWIM
  PHYSICAL_THERAPY
  INDOOR_ACTIVITY
  YARD_TIME
  WHEELCHAIR_MOBILITY
  ASSISTED_WALKING
  STRETCHING
  EXERCISE
}

enum ActivityLevel {
  VERY_LOW
  LOW
  MODERATE
  HIGH
  VERY_HIGH
}

enum EnergyLevel {
  EXHAUSTED
  TIRED
  NORMAL
  ENERGETIC
  HYPERACTIVE
}

enum GaitQuality {
  NORMAL
  SLIGHTLY_OFF
  NOTICEABLE_LIMP
  SEVERE_LIMP
  UNABLE_TO_WALK
}

enum MobilityLevel {
  FULL_MOBILITY
  SLIGHT_LIMITATION
  MODERATE_LIMITATION
  SEVERE_LIMITATION
  IMMOBILE
}

enum AssistanceType {
  NONE
  VERBAL_ENCOURAGEMENT
  LEASH_SUPPORT
  HARNESS_LIFT
  WHEELCHAIR
  CARRIED
  FULL_ASSISTANCE
}

enum PantingLevel {
  NONE
  LIGHT
  MODERATE
  HEAVY
  EXCESSIVE
}

enum MealRelation {
  FASTING
  BEFORE_MEAL
  AFTER_MEAL
  BEDTIME
  RANDOM
}

enum MeasurementUnit {
  MG_DL // milligrams per deciliter
  MMOL_L // millimoles per liter
}

enum SeizureType {
  GENERALIZED // Grand mal, affects whole body
  FOCAL // Partial, affects specific area
  ABSENCE // Brief loss of consciousness
  MYOCLONIC // Brief muscle jerks
  TONIC_CLONIC // Stiffening then jerking
  ATONIC // Drop seizures
  UNKNOWN // Type unclear
}

enum SeizureSeverity {
  MILD // Brief, minimal symptoms
  MODERATE // Noticeable but controlled
  SEVERE // Intense, long-lasting
  CRITICAL // Emergency level
}

enum CapillaryRefillTime {
  LESS_THAN_ONE_SECOND // <1 second (Normal)
  ONE_TO_TWO_SECONDS // 1-2 seconds (Normal)
  TWO_TO_THREE_SECONDS // 2-3 seconds (Mild dehydration)
  MORE_THAN_THREE_SECONDS // >3 seconds (Concerning)
}

enum MucousMembraneColor {
  PINK_AND_MOIST // Normal
  PALE
  WHITE
  BLUE_CYANOTIC // Blue/Cyanotic
  YELLOW_ICTERIC // Yellow/Icteric
  RED_INJECTED // Red/Injected
}

enum HydrationStatus {
  NORMAL // Normal
  MILD_DEHYDRATION // Mild dehydration (3-5%)
  MODERATE_DEHYDRATION // Moderate dehydration (5-10%)
  SEVERE_DEHYDRATION // Severe dehydration (>10%)
}

// ====================================== MODELS =============================== \\

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StripeSubscription {
  id                 String    @id @default(cuid())
  userId             String    @unique
  customerId         String // from Stripe when creating the customer
  paymentMethodId    String // Stripe PaymentMethod ID (reusable)
  subscriptionId     String? // optional: track active subscription
  status             String    @default("inactive")
  plan               String    @default("COMFORT")
  planPrice          Int       @default(0)
  tokensIncluded     Int       @default(0)
  trialEndsAt        DateTime?
  cancelAtPeriodEnd  Boolean
  canceledAt         DateTime?
  currentPeriodEnd   DateTime?
  paymentMethod      String? // 'card', 'apple_pay', 'google_pay', 'link', etc.
  paymentMethodBrand String? // 'visa', 'mastercard', etc. (for cards)
  paymentMethodLast4 String? // Last 4 digits (for cards)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}

model User {
  id            String  @id @default(cuid())
  email         String  @unique @db.VarChar(255)
  role          String  @default("Free") @db.VarChar(255)
  isSuperUser   Boolean @default(false)
  isAdmin       Boolean @default(false)
  isFreeUser    Boolean @default(true)
  isComfortUser Boolean @default(false)
  isLegacyUser  Boolean @default(false)
  firstName     String? @db.VarChar(255)
  lastName      String? @db.VarChar(255)

  stripeCustomerId String? @unique @db.VarChar(255)

  // NextAuth fields
  emailVerified DateTime? // Add for NextAuth
  name          String?
  image         String?

  // Token fields
  tokens         Int       @default(750) // Starting tokens for new users
  tokensUsed     Int       @default(0) // Track total tokens consumed
  lastTokenReset DateTime?

  // Relationships 
  accounts           Account[]
  sessions           Session[]
  pets               Pet[]
  stripeSubscription StripeSubscription?
  tokenTransactions  TokenTransaction[]
  galleryItems       GalleryItem[]
  tickets            Ticket[]
  vet                Vet?                @relation(fields: [vetId], references: [id])
  vetId              String?             @unique // Foreign key

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TokenTransaction {
  id          String               @id @default(cuid())
  userId      String
  amount      Int // Positive for credits, negative for debits
  type        TokenTransactionType
  description String? // Optional description of what tokens were used for
  metadata    Json? // Store additional context (e.g., feature used, request details)
  createdAt   DateTime             @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model Pet {
  id                    String    @id @default(cuid())
  name                  String
  type                  PetType
  breed                 String
  age                   String
  gender                String
  weight                String
  spayedNeutered        String
  microchipId           String?
  allergies             String?
  emergencyContactName  String?
  emergencyContactPhone String?
  lastVisit             DateTime?
  nextVisit             DateTime?
  owner                 User      @relation(fields: [ownerId], references: [id])
  ownerId               String
  notes                 String?
  fileName              String    @default("") @db.VarChar(255) // Original filename
  filePath              String    @default("") @db.Text // Storage path or URL

  painScores   PainScore[]
  appointments Appointment[]
  medications  Medication[]
  feedings     Feeding[]
  seizures     Seizure[]
  waters       Water[]
  bloodSugars  BloodSugar[]
  galleryItems GalleryItem[]
  movements    Movement[]
  vitalSigns   VitalSigns[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PainScore {
  id           String   @id @default(cuid())
  score        Int
  timeRecorded DateTime
  symptoms     String?  @default("")
  location     String? // Where on the body is the pain (e.g., "left hip", "back legs", "abdomen")
  triggers     String? // What triggered or worsened the pain (e.g., "after walking", "weather change", "before medication")
  relief       String? // What provided relief (e.g., "heat pad", "medication", "rest", "massage")

  notes String?
  pet   Pet     @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feeding {
  id           String   @id @default(cuid())
  timeRecorded DateTime
  foodType     String
  foodAmount   String
  moodRating   Int      @default(0)
  brand        String
  ingredients  String?
  notes        String?
  pet          Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Water {
  id           String   @id @default(cuid())
  milliliters  String
  timeRecorded DateTime
  moodRating   Int
  notes        String?
  pet          Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId        String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medication {
  id                 String    @id @default(cuid())
  drugName           String
  dosage             String
  dosageUnit         String
  frequency          String
  customFrequency    String?
  startDate          DateTime
  endDate            DateTime?
  reminderEnabled    Boolean   @default(false)
  reminderTimes      String[] // Changed from Json to String[]
  lastReminderDate   String?
  sentRemindersToday String[]  @default([])
  notes              String?
  prescribedBy       String?
  timezoneOffset     Int?      @default(-5)

  petId String
  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Movement {
  id           String   @id @default(cuid())
  petId        String
  userId       String
  timeRecorded DateTime

  // Movement Type
  movementType MovementType

  // Duration & Distance
  durationMinutes Int?
  distanceMeters  Float?

  // Activity Level
  activityLevel ActivityLevel

  // Location & Environment
  location    String?
  indoor      Boolean @default(false)
  weather     String?
  temperature Float?

  // Pet Condition
  energyBefore EnergyLevel
  energyAfter  EnergyLevel
  painBefore   Int? // 1-10 scale
  painAfter    Int? // 1-10 scale

  // Movement Quality
  gaitQuality GaitQuality?
  mobility    MobilityLevel
  assistance  AssistanceType?

  // Equipment Used
  wheelchair Boolean @default(false)
  harness    Boolean @default(false)
  leash      Boolean @default(false)

  // Behavioral Observations
  enthusiasm Int? // 1-10 scale
  reluctance Boolean       @default(false)
  limping    Boolean       @default(false)
  panting    PantingLevel?

  // Rest & Recovery
  restBreaks   Int?
  recoveryTime Int? // minutes needed to recover

  // Notes
  notes String?

  // Relationships
  pet Pet @relation(fields: [petId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Appointment {
  id              String            @id @default(cuid())
  date            DateTime
  time            String
  reminderTime    String?
  reminderEnabled Boolean?
  serviceType     AppointmentType
  description     String?
  status          AppointmentStatus @default(SCHEDULED)
  veterinarian    String?
  notes           String?

  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BloodSugar {
  id              String          @id @default(cuid())
  value           String
  notes           String?
  timeRecorded    DateTime
  mealRelation    MealRelation    @default(FASTING) // FASTING, BEFORE_MEAL, AFTER_MEAL, BEDTIME
  measurementUnit MeasurementUnit @default(MG_DL) // MG_DL, MMOL_L
  targetRange     String? // e.g., "80-120 mg/dL" or custom range
  symptoms        String? // Associated symptoms (lethargy, excessive thirst, etc.)
  medicationGiven Boolean         @default(false) // Whether insulin/medication was administered

  pet   Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seizure {
  id            String          @id @default(cuid())
  timeRecorded  DateTime
  duration      Int // Duration in seconds (optional)
  notes         String? // Optional observations or details
  videoUrl      String?
  videoFilename String?
  seizureType   SeizureType     @default(GENERALIZED) // Type classification
  severity      SeizureSeverity @default(MILD) // Intensity level
  triggerFactor String? // Potential triggers
  recoveryTime  Int?
  pet           Pet             @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Newsletter {
  id                       String  @id @default(cuid())
  firstName                String  @db.VarChar(255)
  lastName                 String  @db.VarChar(255)
  email                    String  @unique @db.VarChar(255)
  agreedToPrivacyStatement Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Log {
  id        String   @id @default(cuid())
  level     String // e.g., 'info', 'error', 'debug'
  message   String
  metadata  Json? // Optional, store additional context
  createdAt DateTime @default(now())
}

model GalleryItem {
  id          String    @id @default(cuid())
  url         String // Firebase download URL
  type        MediaType // ENUM for IMAGE or VIDEO
  name        String // Original filename
  size        Int // File size in bytes
  mimeType    String // e.g., "image/jpeg", "video/mp4"
  thumbnail   String? // Optional thumbnail URL for videos
  description String? // Optional user description
  tags        String[] // Array of tags for organization

  // Relationships
  pet    Pet    @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId  String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([userId, createdAt])
  @@index([petId, createdAt])
  @@index([type])
}

model Ticket {
  id          String @id @default(cuid())
  category    String
  priority    String
  status      String @default("open") // open, in_progress, resolved, closed
  subject     String
  description String
  email       String
  deviceInfo  String
  attachments Json

  // Relationships
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String
  messages TicketMessage[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Indexes for performance
  @@index([userId, createdAt])
  @@index([priority])
  @@index([status])
}

model TicketMessage {
  id      String  @id @default(cuid())
  content String
  isStaff Boolean @default(false) // true if message from support staff

  // Optional attachments for the message
  attachments Json?

  // Relationships
  ticket   Ticket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  ticketId String

  // Author info
  authorEmail String?
  authorName  String?

  // Timestamps
  createdAt DateTime @default(now())

  // Indexes
  @@index([ticketId, createdAt])
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Media {
  id          String     @id @default(cuid())
  title       String     @db.VarChar(255)
  type        MediaType
  format      String     @db.VarChar(10)
  size        String     @db.VarChar(20) // Stored as string like "2.4 MB"
  sizeBytes   BigInt? // Optional: actual file size in bytes for sorting/filtering
  uploadDate  DateTime   @default(now())
  views       Int        @default(0)
  downloads   Int        @default(0)
  thumbnail   String?    @db.Text // URL or base64 encoded thumbnail
  color       MediaColor @default(BLUE)
  fileName    String     @db.VarChar(255) // Original filename
  filePath    String     @db.Text // Storage path or URL
  mimeType    String     @db.VarChar(100) // MIME type like "application/pdf"
  description String?    @db.Text
  tags        String[] // Array of tags for better organization
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([type])
  @@index([uploadDate])
  @@index([isActive])
}

model VitalSigns {
  id                  String               @id @default(cuid())
  pet                 Pet                  @relation(fields: [petId], references: [id], onDelete: Cascade)
  petId               String
  temperature         Float? // Fahrenheit
  heartRate           Int? // beats per minute
  respiratoryRate     Int? // breaths per minute
  weight              Float? // pounds
  bloodPressure       String? // systolic/diastolic format
  capillaryRefillTime CapillaryRefillTime?
  mucousMembranes     MucousMembraneColor?
  hydrationStatus     HydrationStatus?
  notes               String?
  timeRecorded        DateTime
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model Vet {
  id             String  @id @default(cuid())
  vetName        String
  clinicName     String
  phone          String
  emergencyPhone String
  email          String
  website        String
  address        String
  hours          String
  notes          String?
  user           User?
}
